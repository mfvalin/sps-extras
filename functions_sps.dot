# update_cfg config_file_name variable_name value
update_cfg() {
  ConfigFile="${1}"
  [[ -f "${ConfigFile}" ]] || return 1
  [[ -n $2 ]]  || return 1
  VariableName="${2}"
  grep -v "^[ ]*${VariableName}=" ${ConfigFile} >${ConfigFile}.new
  mv ${ConfigFile}.new ${ConfigFile}
  [[ -n $3 ]] && echo "${VariableName}='${3}'" >>${ConfigFile}
}
# clean runtime directories without saving anything in case of crash/kill
cleanup_crash() {
  [[ -f Data/RunFlag ]] || return         # nothing crashed/killed
  [[ -d Data/Input ]] && rm -rf Data/Input && mkdir -p Data/Input/inrep
  [[ -d SHM/storage_model ]] && rm -rf SHM/storage_model && mkdir SHM/storage_model
  [[ -f outcfg.out.orig ]] && mv outcfg.out.orig outcfg.out
#  rm -rf ${exper_archive}/${exper}.snapshot
  rm -f Data/RunFlag
  true
}
# clean runtime directories at end of run, no arguments
cleanup_dirs() {
  [[ -f Data/RunFlag ]] && cleanup_crash  # crashed/killed
  mkdir -p ${exper_archive}/${exper}.snapshot
  rsync -aruvxlH --delete Data/Input ${exper_archive}/${exper}.snapshot/.
  rm -rf Data/Input SHM/storage_model
  [[ "${SHM_VAR}" == /dev/shm* ]] && rm -rf ${SHM_VAR}
  [[ -f outcfg.out.orig ]] && mv outcfg.out.orig outcfg.out
}
# save runtime directories upon crash, no arguments
save_crash() {
  [[ ${SaVeCrAsH} == false ]] && return
  Snapshot=${exper_archive}/${exper}.crash.$(date +%F-%k_%M_%S)
  mkdir -p ${Snapshot}
  rsync -aruvxlH --delete SHM/storage_model ${Snapshot}/.
  unset Snapshot
}
# process restart = .true|false. line in sps.cfg if there is one. call sequence is : fix_sps_cfg true|false
fix_sps_cfg_restart() {
  sed -e "s/[ ]*[Rr][Ee][Ss][Tt][Aa][Rr][Tt][ ]*=[ ]*[.][a-zA-Z]*[.]/ restart = .${1}./" <sps.cfg >sps.cfg.fixed && mv sps.cfg.fixed sps.cfg
}
# get value from class_ig = value
get_class_ig() {
  grep -iw class_ig sps.cfg | tr '[A-Z]' '[a-z]' | sed -e 's/.*class_ig[ ]*=[ ]*//' -e 's/[^0-9].*//'
}
